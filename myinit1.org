#+STARTUP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
      (set-face-attribute 'default nil :font "Monospace" :height 105)
  
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (global-display-line-numbers-mode)
      (fset 'yes-or-no-p 'y-or-n-p)
      (global-set-key (kbd "<f5>") 'revert-buffer)
      ;;(global-set-key (kbd "C-c c") (lambda () (interactive) (save-buffer) (quickrun-shell)))
      (global-set-key (kbd "C-c c") 'recompile)
      (setq compilation-ask-about-save nil)
      (global-set-key (kbd "C-<") 'shrink-window-horizontally)
      (global-set-key (kbd "C->") 'enlarge-window-horizontally)
      (global-set-key (kbd "C-\"") 'shrink-window)
      (global-set-key (kbd "C-:") 'enlarge-window)
      (setq quickrun-focus-p nil)
      (setq inhibit-startup-message t)
      (setq even-window-heights nil)
  (setq compile-command "g++ main.cpp && ./a.out")
  (setq compilation-scroll-output nil)
  '(compilation-scroll-output t)
#+END_SRC
* Transparency and Theme
#+BEGIN_SRC emacs-lisp

 (load-theme 'xresources t)
 (set-frame-parameter (selected-frame) 'alpha-background 0.95)
(load-theme 'xresources t)

#+END_SRC

#+RESULTS:
: t
* Try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* Which Key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
;; Set the banner
(setq dashboard-startup-banner [3])
(setq dashboard-init-info " ")
(setq dashboard-set-footer nil)
(setq dashboard-center-content t)
(setq dashboard-set-file-icons t)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)))                                            
  (dashboard-setup-startup-hook))
 #+end_src
* Org mode

  #+BEGIN_SRC emacs-lisp
                      (use-package org-bullets
                      :ensure t
                      :config
                      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
        ;(add-hook 'org-mode-hook 'org-indent-mode)

                      (custom-set-variables
                       '(org-export-html-postamble nil)
                          ; '(org-hide-leading-stars t)
                           '(org-startup-folded (quote overview))
                           '(org-startup-indented t)
                           )

                      (setq org-file-apps
                                  (append '(
                                    ("\\.pdf\\'" . "evince %s")
                                    ) org-file-apps ))

                          (global-set-key "\C-ca" 'org-agenda)

                          (setq org-agenda-custom-commands
                          '(("c" "Simple agenda view"
                          ((agenda "")
                          (alltodo "")))))

                        (defadvice org-capture-finalize 
                        (after delete-capture-frame activate)  
                      "Advise capture-finalize to close the frame"  
                      (if (equal "capture" (frame-parameter nil 'name))  
                      (delete-frame)))

                      (defadvice org-capture-destroy 
                          (after delete-capture-frame activate)  
                      "Advise capture-destroy to close the frame"  
                      (if (equal "capture" (frame-parameter nil 'name))  
                      (delete-frame)))  

                      (use-package noflet
                      :ensure t )
                      (defun make-capture-frame ()
                      "Create a new frame and run org-capture."
                      (interactive)
                      (make-frame '((name . "capture")))
                      (select-frame-by-name "capture")
                      (delete-other-windows)
                      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
                          (org-capture)))
                      (setq org-src-window-setup 'current-window)




                      (use-package org-roam
                    :ensure t
                    :custom
                    (org-roam-directory (file-truename "~/Notes"))
                    :bind (("C-c n l" . org-roam-buffer-toggle)
                           ("C-c n f" . org-roam-node-find)
                           ("C-c n g" . org-roam-graph)
                           ("C-c n i" . org-roam-node-insert)
                           ("C-c n c" . org-roam-capture)
                           ;; Dailies
                           ("C-c n j" . org-roam-dailies-capture-today))
                    :config
                    ;; If you're using a vertical completion framework, you might want a more informative completion interface
                    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
                    (org-roam-db-autosync-mode)
                    ;; If using org-roam-protocol
                    (require 'org-roam-protocol))

                    (custom-set-faces
                  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
                  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
                  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
                  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
                  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
                )

    (require 'color)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 1))


  #+END_SRC

  #+RESULTS:
  : make-capture-frame
* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
  



   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Autocomplete
;;  #+BEGIN_SRC emacs-lisp
;;  (use-package auto-complete
;;  :ensure t
;;  :init
;;  (progn
;;    (ac-config-default)
;;    (global-auto-complete-mode t)
;;    ))
;;  #+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
  #+END_SRC

  #+RESULTS:
  : t
  
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp

  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))
      

      (use-package elpy
      :ensure t
      :config 
      (elpy-enable))

  #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

  #+END_SRC
* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Misc packages
  #+BEGIN_SRC emacs-lisp

  ; Highlights the current cursor line
 ; (global-hl-line-mode t)
  
  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  )
  
  ; deletes all the whitespace when you hit backspace or delete
 ; (use-package hungry-delete
 ; :ensure t
 ; :config
 ; (global-hungry-delete-mode))
  
  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config 
  (global-set-key (kbd "C-=") 'er/expand-region))

(setq save-interprogram-paste-before-kill t)


(global-auto-revert-mode 1) ;; you might not want this
(setq auto-revert-verbose nil) ;; or this
(global-set-key (kbd "<f5>") 'revert-buffer)

(require 'org-tempo)
  
  #+END_SRC

* iedit and narrow / widen dwim

  #+BEGIN_SRC emacs-lisp
  ; mark and edit all copies of the marked region simultaniously. 
  (use-package iedit
  :ensure t)
  
  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.
  
  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))
  
  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  
  #+END_SRC


  #+RESULTS:
  : narrow-or-widen-dwim

* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	 (setq web-mode-engines-alist
	       '(("django"    . "\\.html\\'")))
	 (setq web-mode-ac-sources-alist
	       '(("css" . (ac-source-css-property))
		 ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
(setq web-mode-enable-auto-closing t))
(setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned


#+END_SRC

#+RESULTS:
: t

* Load other files
   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (f)
       "load the elisp file only if it exists and is readable"
       (if (file-readable-p f)
           (load-file f)))

     (load-if-exists "~/Dropbox/shared/mu4econfig.el")
     (load-if-exists "~/Dropbox/shared/tempstuff.el")
     (load-if-exists "~/Dropbox/shared/not-for-github.el")

   #+END_SRC

   #+RESULTS:
   : t
   
* Better shell
#+begin_src emacs-lisp
(use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
           ("C-;" . better-shell-remote-open)))
#+end_src

* eshell stuff
#+begin_src emacs-lisp
(use-package shell-switcher
  :ensure t
  :config 
  (setq shell-switcher-mode t)
  :bind (("C-'" . shell-switcher-switch-buffer)
	   ("C-x 4 '" . shell-switcher-switch-buffer-other-window)
	   ("C-M-'" . shell-switcher-new-shell)))


;; Visual commands
(setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
				 "ncftp" "pine" "tin" "trn" "elm" "vim"
				 "nmtui" "alsamixer" "htop" "el" "elinks"
				 ))
(setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
(setq eshell-list-files-after-cd t)
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
	    '(lambda()
	       (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

(defun eshell/magit ()
  "Function to open magit-status for the current directory"
  (interactive)
  (magit-status default-directory)
  nil)

 (defcustom dotemacs-eshell/prompt-git-info
  t
  "Turns on additional git information in the prompt."
  :group 'dotemacs-eshell
  :type 'boolean)

;; (epe-colorize-with-face "abc" 'font-lock-comment-face)
(defmacro epe-colorize-with-face (str face)
  `(propertize ,str 'face ,face))

(defface epe-venv-face
  '((t (:inherit font-lock-comment-face)))
  "Face of python virtual environment info in prompt."
  :group 'epe)

  (setq eshell-prompt-function
      (lambda ()
        (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
                (when (and dotemacs-eshell/prompt-git-info
                           (fboundp #'vc-git-branches))
                  (let ((branch (car (vc-git-branches))))
                    (when branch
                      (concat
                       (propertize " [" 'face 'font-lock-keyword-face)
                       (propertize branch 'face 'font-lock-function-name-face)
                       (let* ((status (shell-command-to-string "git status --porcelain"))
                              (parts (split-string status "\n" t " "))
                              (states (mapcar #'string-to-char parts))
                              (added (count-if (lambda (char) (= char ?A)) states))
                              (modified (count-if (lambda (char) (= char ?M)) states))
                              (deleted (count-if (lambda (char) (= char ?D)) states)))
                         (when (> (+ added modified deleted) 0)
                           (propertize (format " +%d ~%d -%d" added modified deleted) 'face 'font-lock-comment-face)))
                       (propertize "]" 'face 'font-lock-keyword-face)))))
                (when (and (boundp #'venv-current-name) venv-current-name)
                  (concat 
                    (epe-colorize-with-face " [" 'epe-venv-face) 
                    (propertize venv-current-name 'face `(:foreground "#2E8B57" :slant italic))
                    (epe-colorize-with-face "]" 'epe-venv-face))) 
                (propertize " $ " 'face 'font-lock-constant-face))))
#+end_src

#+RESULTS:
| lambda | nil | (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt) (when (and dotemacs-eshell/prompt-git-info (fboundp #'vc-git-branches)) (let ((branch (car (vc-git-branches)))) (when branch (concat (propertize  [ 'face 'font-lock-keyword-face) (propertize branch 'face 'font-lock-function-name-face) (let* ((status (shell-command-to-string git status --porcelain)) (parts (split-string status |

* Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
  :ensure t


  :bind (:map elfeed-search-mode-map
	      ("q" . bjm/elfeed-save-db-and-bury)
	      ("Q" . bjm/elfeed-save-db-and-bury)
	      ("m" . elfeed-toggle-star)
	      ("M" . elfeed-toggle-star)
	      )
  )


#+end_src

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))
#+END_SRC

#+RESULTS:

* c++
#+begin_src emacs-lisp
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode)
                  (ggtags-mode 1)))))

#+end_src

#+RESULTS:
: t

* IBUFFER
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
 (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("dired" (mode . dired-mode))
		 ("org" (name . "^.*org$"))
	       
		 ("web" (or (mode . web-mode) (mode . js2-mode)))
		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		 ("mu4e" (or

                (mode . mu4e-compose-mode)
                (name . "\*mu4e\*")
                ))
		 ("programming" (or
				 (mode . python-mode)
				 (mode . c++-mode)))
		 ("emacs" (or
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")))
		 ))))
 (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))

 ;; don't show these
					  ;(add-to-list 'ibuffer-never-show-predicates "zowie")
 ;; Don't show filter groups if there are no buffers in that group
 (setq ibuffer-show-empty-filter-groups nil)

 ;; Don't ask for confirmation to delete marked buffers
 (setq ibuffer-expert t)

#+END_SRC emacs-lisp

* Emmet mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  )

#+END_SRC

#+RESULTS:
: t

* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))
  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
)

#+END_SRC

#+RESULTS:

* misc
#+BEGIN_SRC emacs-lisp
(defun z/nikola-deploy () ""
(interactive)
(venv-with-virtualenv "blog" (shell-command "cd ~/gh/cestlaz.github.io; nikola github_deploy"))
)

(defun z/swap-windows ()
""
(interactive)
(ace-swap-window)
(aw-flip-window)
)

#+END_SRC
* auto-yasnippet
#+begin_src emacs-lisp
  (use-package auto-yasnippet
    :ensure t)
  
#+end_src

#+RESULTS:
* perskeymap
#+begin_src emacs-lisp
    ;; set up my own map
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-1") 'z-map)


  (define-key z-map (kbd "y") 'aya-create)
  (define-key z-map (kbd "e") 'aya-expand)
  (global-set-key (kbd "C-c m") 'menu-bar-mode)



#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (save-buffer) | (quickrun-shell) |

* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)
    ))

    (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

    (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


    (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                              :hint nil)
    "
  Git gutter:
    _j_: next hunk        _s_tage hunk     _q_uit
    _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _h_: first hunk
    _l_: last hunk        set start _R_evision
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
         :color blue))



#+END_SRC

#+RESULTS:
: hydra-git-gutter/body

* LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :config
    :commands lsp
    :custom
   ;; :require lsp-mode
    (lsp-auto-guess-root nil)
    (setq lsp t)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :hook ((python-mode c-mode java-mode c++-mode) . lsp))
  (add-hook 'prog-mode-hool #'lsp)


  (use-package lsp-ui
    ;;:require lsp-ui
  :ensure t
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu))
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    ;; Use lsp-ui-doc-webkit only in GUI
    (setq lsp-ui-doc-use-webkit t)
    (setq lsp-ui-mode t)
    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))
  (defun lsp-ui-sideline--compute-height nil '(height unspecified))
#+END_SRC

#+RESULTS:

* Company
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)

(global-company-mode t)
)

#+END_SRC

#+RESULTS:
: t

* Python

#+BEGIN_SRC emacs-lisp


        (use-package virtualenvwrapper
         ; :ensure t
          :config
          (venv-initialize-interactive-shells)
          (venv-initialize-eshell))
 
(venv-workon "p3")
(setq lsp-python-executable-cmd "python")

#+END_SRC

#+RESULTS:
: python

* C++
#+BEGIN_SRC emacs-lisp

(setq lsp-clangd-executable "clangd")
(setq lsp-clients-clangd-executable "clangd")

#+END_SRC

#+RESULTS:
: clangd

* Functions

#+BEGIN_SRC emacs-lisp
  
    ;; font scaling
    (use-package default-text-scale
      :ensure t
     :config
      (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
      (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

#+END_SRC

#+RESULTS:
: t

* Java
#+begin_src emacs-lisp
    (use-package lsp-java 
  :ensure t
  :config (add-hook 'java-mode-hook 'lsp))

#+end_src

#+RESULTS:
: t

* Dap mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t
    :after (lsp-mode)
    :functions dap-hydra/nil
    :config
   ;; (require 'dap-java)
    :bind (:map lsp-mode-map
           ("<f5>" . dap-debug)
           ("M-<f5>" . dap-hydra))
    :hook ((dap-mode . dap-ui-mode)
      (dap-session-created . (lambda (&_rest) (dap-hydra)))
      (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

 ;; (use-package dap-java
 ;;   :ensure t
 ;;   :config)
  
#+END_SRC

#+RESULTS:

* Helm
#+begin_src emacs-lisp
    (use-package helm-lsp)
  :ensure t
#+end_src

#+RESULTS:
: t

* ewal
#+begin_src emacs-lisp

   (use-package ewal
      :init
      (setq ewal-use-built-in-always-p nil
            ewal-use-built-in-on-failure-p t
            ewal-built-in-palette "sexy-material"))



#+end_src

#+RESULTS:
: t


#+begin_src emacs-lisp
  (setq lsp-java-autobuild-enabled t)

#+end_src

* Set Emacs backup/undo/autosave folder
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/cache/backup")))
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/cache/undo")))
  (setq auto-save-directory-alist '(("." . "~/.emacs.d/cache/autosave")))
  (setq even-window-heights nil)

#+end_src

